from sympy.interactive.printing import init_printing
init_printing(use_unicode=False, wrap_line=False, no_global=True)
from sympy.matrices import Matrix, eye, zeros, ones, diag, GramSchmidt

class Node:
	def __init__(self):
		self.children = {}
		self.isFinite = False
		self.name = ""
	def __repr__(self):
		return str(self.name) + "\n" + str(self.children.keys()) + "\n" + str(self.isFinite) + "\n"
	def __str__(self):
		s = "Name: " + str(self.name) + "\n"
		for key in self.children.keys():
			s +="Edge: " + key + ":" + self.children[key].name + "\n"
		s += "IsFinite:" + str(self.isFinite) + "\n"
		return s 

def findClosestChild(word, set):
	max = 0
	max_child = set[0]
	for s in set:
		if word[len(word)-len(s.name):] == s.name and len(s.name) >= max:
			max = len(s.name)
			max_child = s
	return max_child

start = Node()
#words = ["00", "11011"]
# words = ["00", "111"]
# words = ["0010", "0110", "011100", "0111100", "01110100", "011110100", "0011111000", "0111010100", "01111010100", "001111110000", "001111101000", "000111111000", "011101010100", "0011111110000", "0111011111000", "0111101010100", "00111111010000", "00111111110000", "00111110101000", "00011111101000", "01110101010100", "001111111010000", "011101111101000", "011101011111000", "011110101010100", "0011111101010000", "0011111111010000", "0011110111110000", "0011101111110000", "0011111010101000", "0001111110101000", "0111010101010100", "00111111101010000", "01110111110101000", "01110101111101000", "01110101011111000", "01111010101010100", "000111111111000000", "001111110101010000", "001111111101010000", "001111011111010000", "001110111111010000", "001111010111110000", "001110101111110000", "001111101010101000", "000111111010101000", "011101010101010100", "0001111111111000000", "0011111110101010000", "0111011111010101000", "0111010111110101000", "0111010101111101000", "0111010101011111000", "0111101010101010100", "00011111111101000000", "00011111011111000000", "00011110111111000000", "00011101111111000000", "00011111111111000000", "00000111111111100000", "00111111010101010000", "00111111110101010000", "00111101111101010000", "00111011111101010000", "00111101011111010000", "00111010111111010000", "00111101010111110000", "00111010101111110000", "00111110101010101000", "00011111101010101000", "01110101010101010100", "000111111111101000000", "000111111011111000000", "000111110111111000000", "000111101111111000000", "000111011111111000000", "000111111111111000000", "001111111010101010000", "011101111101010101000", "011101011111010101000", "011101010111110101000", "011101010101111101000", "011101010101011111000", "011110101010101010100", "0001111111110101000000", "0001111101111101000000", "0001111011111101000000", "0001110111111101000000", "0001111111111101000000", "0001111101011111000000", "0001111111011111000000", "0001111010111111000000", "0001111110111111000000", "0001110101111111000000", "0001111101111111000000", "0001111011111111000000", "0001110111111111000000", "0000011111111110100000", "0000011111101111100000", "0000011111011111100000", "0000011110111111100000", "0000011101111111100000", "0011111101010101010000", "0011111111010101010000", "0011110111110101010000", "0011101111110101010000", "0011110101111101010000", "0011101011111101010000", "0011110101011111010000", "0011101010111111010000", "0011110101010111110000", "0011101010101111110000", "0011111010101010101000", "0001111110101010101000", "0111010101010101010100", "00011111111110101000000", "00011111101111101000000", "00011111011111101000000", "00011110111111101000000", "00011101111111101000000", "00011111111111101000000", "00011111101011111000000", "00011101111011111000000", "00011111111011111000000", "00011111010111111000000", "00011101110111111000000", "00011111110111111000000", "00011110101111111000000", "00011111101111111000000", "00011101011111111000000", "00011111011111111000000", "00011110111111111000000", "00011101111111111000000", "00111110011111111100000", "00111111101010101010000", "01110111110101010101000", "01110101111101010101000", "01110101011111010101000", "01110101010111110101000", "01110101010101111101000", "01110101010101011111000", "01111010101010101010100"]
# words = ["0010", "0110", "011100", "0111100", "01110100", "011110100", "0011111000", "0111010100", "01111010100", "001111110000", "001111101000", "000111111000", "011101010100", "0011111110000", "0111011111000", "0111101010100", "00111111010000", "00111111110000", "00111110101000", "00011111101000", "01110101010100", "001111111010000", "011101111101000", "011101011111000", "011110101010100", "0011111101010000", "0011111111010000", "0011110111110000", "0011101111110000", "0011111010101000", "0001111110101000", "0111010101010100", "00111111101010000", "01110111110101000", "01110101111101000", "01110101011111000", "01111010101010100", "000111111111000000", "001111110101010000", "001111111101010000", "001111011111010000", "001110111111010000", "001111010111110000", "001110101111110000", "001111101010101000", "000111111010101000", "011101010101010100", "0001111111111000000", "0011111110101010000", "0111011111010101000", "0111010111110101000", "0111010101111101000", "0111010101011111000", "0111101010101010100"]
# words = ["0010", "0110", "011100", "0111100", "01110100", "011110100", "0011111000", "0111010100", "01111010100", "001111110000", "001111101000", "000111111000", "011101010100"]
# words = ["10010", "10110", "1000100", "1011100", "10000100", "10001100", "10111100", "100010100", "101110100", "100001100", "100111100", "1000010100", "1000110100", "1011110100", "10000010000", "10000001000", "10000111000", "10011111000", "10001010100", "10111010100", "10000110100", "10011110100", "100000110000", "100011110000", "100000101000", "100000011000", "100001010100", "100011010100", "101111010100", "100000100010", "101111100010", "100111000110"]
words = ["101", "10010", "10110", "1000100", "1011100", "10000100", "10001100", "10111100", "100010100", "101110100", "100001100", "100111100", "1000010100", "1000110100", "1011110100", "10000010000", "10000001000", "10000111000", "10011111000", "10000110100", "10011110100", "100000110000", "100011110000", "100000101000", "100000011000", "100000100010", "101111100010", "100111000110"]

# f = open('testtesttest21', 'r')
# words = []
# for w in f.readlines():
# 	words.append(w.rstrip())
# f.close()
vers = []

vers.append(start)

print("#Строим автомат")
for word in words: 
	temp = start
	word_len = len(word)
	for j in range(word_len):
		if word[j] not in temp.children:
			temp.children[word[j]] = Node()
			temp.children[word[j]].name = str(temp.name) + word[j] 
			vers.append(temp.children[word[j]])
		temp = temp.children[word[j]]
		if word_len - 1 == j:
			temp.isFinite = True

print("#Добавляем в автомат дуги")
for v in vers:
	if not v.isFinite: 
		if '0' not in v.children:
			v.children['0'] = findClosestChild(str(v.name) + '0', vers)
		if '1' not in v.children:
			v.children['1'] = findClosestChild(str(v.name) + '1', vers)
	print(v)

print("#Удаляем из автомата конечные вершины")
for v in vers:
	if not v.isFinite:
		if v.children['0'].isFinite:
			del(v.children['0'])
		if v.children['1'].isFinite:
			del(v.children['1'])
	print(v)

print("#Удаляем конечные вершины и делаем оставшиеся конечными")
new_vers = []
for v in vers:
	if not v.isFinite:
		v.isFinite = True
		new_vers.append(v)
		print(v)
vers = new_vers#Мы получили автомат по антисловарю

# print("#Генерируем матрицу смежности для получения характеристического многочлена")
len_vers = len(vers)
ver_num = {}
for i in range(len_vers):
	ver_num[vers[i].name] = i

# m = []
# for i in range(len_vers):
# 	m.append([])
# 	for j in range(len_vers):
# 		m[i].append(0)

# for i in range(len_vers):
# 	if '0' in vers[i].children:
# 		j = ver_num[vers[i].children['0'].name]
# 		m[i][j] = 1
# 	if '1' in vers[i].children:
# 		j = ver_num[vers[i].children['1'].name]
# 		m[i][j] = 1	

# print(len(m))
# print(m)
#matrix = Matrix([[0,1,1,0,0,0], [0,0,1,0,0,0], [0,1,0,1,0,0], [0,0,0,1,1,0], [0,0,0,0,0,1], [0,1,0,0,0,0]])
# matrix = Matrix(m)
# print("#Считаем характеристический многочлен")
# print(matrix.berkowitz()[len_vers-1])
print("#Подсчитываем входящие стрелочки")
reverse_m = []
for i in range(len_vers):
	reverse_m.append([])
for i in range(len_vers):
	if '0' in vers[i].children:
		j = ver_num[vers[i].children['0'].name]
		reverse_m[j].append(i+1)
	if '1' in vers[i].children:
		j = ver_num[vers[i].children['1'].name]
		reverse_m[j].append(i+1)
print(reverse_m)
print("#Напечатать детей лямбды")
print(ver_num[start.children["0"].name]+1)
print(ver_num[start.children["1"].name]+1)
